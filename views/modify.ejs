<%- include("partials/header.ejs", {user: user})%>

    <div class="postq">
        <form id="add-post">
            <div class="input-group mb-3">
                <input type="text" class="form-control" placeholder="Enter post title here" aria-label="Username"
                    aria-describedby="basic-addon1" name="title" required />
            </div>
            <select name="category" class="form-select mb-3" aria-label="Default select example">
                <option value="" selected disabled>Choose a Category</option>
                <option value="technology">Technology & Innovation</option>
                <option value="art">Art & Creative Expression</option>
                <option value="education">Education & Learning</option>
                <option value="health">Health & Wellness</option>
                <option value="career">Career & Productivity</option>
                <option value="finance">Finance & Business</option>
                <option value="society">Society & Philosophy</option>
                <option value="lifestyle">Culture & Lifestyle</option>
                <option value="entertainment">Entertainment & Media</option>
                <option value="travel">Travel & Exploration</option>
                <option value="science">Science & Discovery</option>
                <option value="home">Home & Everyday Life</option>
                <option value="news">News & Commentary</option>
                <option value="future">Trends & Future</option>
            </select>
            <div class="input-group mb-3">
                <input type="file" class="form-control" id="inputGroupFile04" aria-describedby="inputGroupFileAddon04"
                    aria-label="Upload" name="thumbnail" accept="image/*" required />
                <!-- <button class="btn btn-outline-secondary" type="button" id="inputGroupFileAddon04">
                    Button
                </button> -->
            </div>
            <div id="body" class="mb-3"></div>
            <input type="hidden" name="content" id="content" required />
            <div id="chosentags" class="mb-1"></div>
            <div class="input-group mb-2" id="tag-container">
                <input id="tag-input" type="text" class="form-control"
                    placeholder="Add up to 5 hashtags... (#coding #fitness #meme)" aria-label="tags"
                    aria-describedby="basic-addon1" />
            </div>
            <ul id="tag-rec" class="list-group list-group-flush">
            </ul>
            <input type="hidden" name="tags" id="tags-hidden">
            <button type="submit" class="btn btn-primary mt-3">Submit</button>
        </form>
    </div>
    <script src="https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js"></script>
    <script>
        const taginput = document.getElementById("tag-input");
        const tagcontainer = document.getElementById("tag-container");
        const taghidden = document.getElementById("tags-hidden");
        const chosentags = document.getElementById("chosentags");
        const tagrec = document.getElementById("tag-rec");
        let tags = [];
        let tagtimeout;
        taginput.addEventListener("keydown", (e) => {
            if (e.key === " " || e.key === "Enter") {
                e.preventDefault();
                let value = taginput.value.trim();
                if (!value.startsWith("#")) {
                    value = "#".concat(value)
                }
                if (value.length > 1 && !tags.includes(value)) {
                    tags.push(value);
                    addTagElement(value);
                    updateHiddenInput();
                }
                taginput.value = "";
            }
        })
        function addTagElement(value) {
            const tagEl = document.createElement("span");
            tagEl.className = "tag";
            tagEl.innerText = value;
            chosentags.appendChild(tagEl)
            tagEl.onclick = () => {
                tags = tags.filter(t => t !== value);
                tagEl.remove();
                updateHiddenInput();
            }
            // tagcontainer.insertBefore(tagEl, taginput);
        }
        function updateHiddenInput() {
            taghidden.value = tags.join(",")
        }
        taginput.addEventListener("input", async (e) => {
            clearTimeout(tagtimeout)
            tagtimeout = setTimeout(() => {
                let query = e.target.value.trim();
                if (!query.startsWith("#")) {
                    query = "#".concat(query);
                }
                if (query.length > 1) {
                    tagSearch(query)
                }
            }, 300)
        })
        async function tagSearch(query) {
            try {
                const response = await axios.get(`/query?q=${encodeURIComponent(query)}`);
                const tag_names = response.data.tags;
                console.log(tag_names)
                displayTagResult(tag_names)
            } catch (error) {
                console.log(error);
                console.log("error at tagsearch function");
            }
        }
        function displayTagResult(tag_names) {
            if (tag_names.length == 0) {
                tagrec.innerHTML = `<li class='list-group-item tagempty'>No tags found</li>`
                return;
            }
            tagrec.innerHTML = tag_names.map(tag => `<li class='list-group-item tagitem' onclick=tagreplace("${tag}");>${tag}</li>`).join("")
        }
        function tagreplace(tag) {
            if (!tags.includes(tag)) {
                tags.push(tag);
                addTagElement(tag);
                updateHiddenInput();
            }
            taginput.value = "";
            tagrec.innerHTML = "";
        }

        const editor = new toastui.Editor({
            el: document.querySelector('#body'),
            height: '500px',
            initialEditType: 'wysiwyg',
            previewStyle: 'horizontal',
        });
        document.getElementById('add-post').addEventListener('submit', (event) => {
            document.getElementById('content').value = editor.getMarkdown();
            event.preventDefault();
            const formData = new FormData(event.target);
            const jsonData = Object.fromEntries(formData.entries());
            // coverts formData to JS Object

            console.log(jsonData);

            axios.post("/modify", jsonData, {
                headers: { "Content-Type": "multipart/form-data" },
                // ☝️ is for when a form contains files
                // it is not needed when form contains only plain text
            }).then((response) = window.history.back()).catch(error => console.log("error"));
        });
    </script>
    <%- include("partials/footer.ejs")%>